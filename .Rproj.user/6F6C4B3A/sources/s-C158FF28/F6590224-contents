---
title: "Heterogeneous error variance"
output: 
  html_document:
    includes:
      after_body: footer.html						 
---

**packages & data**
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# packages for better formatting tables for html output
library(kableExtra)
library(formattable)
```


```{r}
pacman::p_load(dplyr, tibble, # packages for data handling
               nlme, lme4, glmmTMB, sommer) # packages for mixed models

dat <- agridat::mcconway.turnip %>%
  as_tibble() %>% 
  mutate(densf = as.factor(density))
```

# Motivation
This is a randomized complete block design (4 blocks) with three treatment factors: genotype, date and density, leading to 16 treatment level combinations (2 genotypes, 2 planting dates, 4 densities) [(Piepho, 2009)](https://acsess.onlinelibrary.wiley.com/doi/abs/10.2134/agronj2008.0226x). It can be argued that heterogeneous error variances (*i.e.* heteroscedasticity) for two of the treatments should be considered:

```{r, out.width=c('50%', '50%'), fig.show='hold'}
boxplot(yield ~ date,    data=dat)
boxplot(yield ~ density, data=dat)
```

# 4 Models {.tabset .tabset-fade .tabset-pills}
We therefore set up 4 models, which only differ in the variance structure of the errors. More specifically, we allow for heterogeneous error variances / heteroscedascity per group for the effect levels of Date and Density. This variance structure is sometimes also referred to as *diagonal*. 

Regarding the effects in the model, we take the same approach as [Piepho (2009)](https://acsess.onlinelibrary.wiley.com/doi/abs/10.2134/agronj2008.0226x), which calls for fixed main effects for `gen`, `date` and `densf` as well as all their interaction effects, plus random `block` effects.

```{r, echo=FALSE}
tibble(Model = paste0("mod", 1:4) %>% cell_spec(bold=T),
       Block    = "Identity",
       Genotype = "Identity",
       Density  = c("Identity", "Identity", "Diagonal", "Diagonal"),
       Date     = c("Identity", "Diagonal", "Identity", "Diagonal")) %>% 
  mutate(Density = ifelse(Density=="Diagonal", cell_spec(Density, bold=T), Density),
         Date    = ifelse(   Date=="Diagonal", cell_spec(Date,    bold=T), Date)) %>% 
  kable(escape = FALSE) %>% 
  kable_styling(bootstrap_options = c("striped", "hover"), 
                full_width = FALSE) %>% 
  add_header_above(c(" ", "Term in multiplicative variance structure"=4))
```

## nlme
To accomplish this in `nlme()`, we need to use the *variance function* `varIdent()` in the `weights=` statement, which is *used to allow for different variances according to the levels of a classification factor*. In model number 4, we are allowing for heterogeneous error variances for both dates and densities, which is done by combining two variance functions via `varComb()`:

```{r}
mod1.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf, 
                       random  = ~ 1|block,
                       weights = NULL, # default, i.e. homoscedastic errors
                       data    = dat)

mod2.nlme <- mod1.nlme %>% 
  update(weights = varIdent(form=~1|densf)) # one error variance per density

mod3.nlme <- mod1.nlme %>% 
  update(weights = varIdent(form=~1|date))  # one error variance per date

mod4.nlme <- mod1.nlme %>% 
  update(weights = varComb(varIdent(form=~1|densf), # one error variance per 
                           varIdent(form=~1|date))) # density-date combination

```

## lme4
in progress

## glmmTMB
In `glmmTMB()` it is -to our knowledge- not possible to adjust the variance structure of the error.

>Just like in `nlme`, there is a `weights=` option in `glmmTMB()`. However, to our understanding, they have different functions: 
> 
>In `nlme`, it requires *"an optional `varFunc` object or one-sided formula describing the within-group heteroscedasticity structure"* [(nlme RefMan)](https://cran.r-project.org/web/packages/glmmTMB/glmmTMB.pdf#Rfn.glmmTMB.1) and we make use of this in the example at hand.   
>
>In `glmmTMB`, the [RefMan](https://cran.r-project.org/web/packages/glmmTMB/glmmTMB.pdf#Rfn.glmmTMB.1) only states *"weights, as in `glm`. Not automatically scaled to have sum 1"*. Following this trail, the `glm` documentation description for the `weights=` option is *"an optional vector of ‘prior weights’ to be used in the fitting process. Should be NULL or a numeric vector."*.

We can, however, "*fix the residual variance  to  be  0  (actually  a  small  non-zero  value)*" and therefore "*force variance into the random effects*" [(glmmTMB RefMan)](https://cran.r-project.org/web/packages/glmmTMB/glmmTMB.pdf#Rfn.glmmTMB.1) via adding the `dispformula = ~0` option. 

Thus, we need to make sure to add a random effect with respective variance structure to the model that leads to the estimation of the desired variance components. In the case of mimicing the error variance as a random effect, we can create an `id` column in the data with different entries for each data point:

```{r}
dat.id <- dat %>% 
  mutate(id = 1:n() %>% as.factor) # running number 1 - 64
```

We should now be able to mimic the error variance via the random term `(1|id)`. We can verify this quickly:

```{r}
mod1.glmm.fixonly <- glmmTMB(formula =  yield ~ gen * date * densf,
                             data    = dat.id, REML = TRUE)

mod1.glmm.fixonly %>% 
  update(formula = .~. + (1|block)) %>% VarCorr
mod1.glmm.fixonly %>% 
  update(formula = .~. + (1|block) + (1|id),
         dispformula = ~0) %>% VarCorr


```



## sommer
in progress

# Variance Components {.tabset .tabset-fade .tabset-pills}

## nlme
As far as we know, it is quite cumbersome to extract variance component estimates from `nlme` objects (in a table format we are used to), even with helper packages such as `broom.mixed`. Beneath is the the most elegant approach we have so far when trying to get similarly formatted output for all 4 models. The general approach is to first get a table with a column for 

+ all levels / level-combinations for which heterogeneous error variances were fit
+ their respective value of the model-object's `varStruct` and
+ the overall value of the model-object's `sigma`.

By multiplying the latter two, we receive the respective standard error estimate, which needs to be squared in order to obtain the respective variance component estimate.

### mod1
```{r}
mod1.nlme.VC <- tibble(grp="homoscedastic", varStruct=1) %>% 
  mutate(sigma         = mod1.nlme$sigma) %>% 
  mutate(StandardError = sigma*varStruct) %>% 
  mutate(Variance      = StandardError^2)
```
```{r, echo=FALSE}
mod1.nlme.VC %>%
  mutate_if(is.double, round, 3) %>% 
  kable(escape = FALSE) %>% 
  kable_styling(bootstrap_options = c("bordered", "hover"), 
                full_width = FALSE)
```

### mod2
```{r}
mod2.nlme.VC <- mod2.nlme$modelStruct$varStruct %>% 
  coef(unconstrained=FALSE, allCoef=TRUE) %>% 
  enframe(name="grp", value="varStruct") %>% 
  mutate(sigma         = mod2.nlme$sigma) %>% 
  mutate(StandardError = sigma*varStruct) %>% 
  mutate(Variance      = StandardError^2)
```
```{r, echo=FALSE}
mod2.nlme.VC %>%
  mutate_if(is.double, round, 3) %>% 
  kable(escape = FALSE) %>% 
  kable_styling(bootstrap_options = c("bordered", "hover"), 
                full_width = FALSE)
```

### mod3
```{r}
mod3.nlme.VC <- mod3.nlme$modelStruct$varStruct %>% 
  coef(unconstrained=FALSE, allCoef=TRUE) %>% 
  enframe(name="grp", value="varStruct") %>% 
  mutate(sigma         = mod3.nlme$sigma) %>% 
  mutate(StandardError = sigma*varStruct) %>% 
  mutate(Variance      = StandardError^2)
```
```{r, echo=FALSE}
mod3.nlme.VC %>%
  mutate_if(is.double, round, 3) %>% 
  kable(escape = FALSE) %>% 
  kable_styling(bootstrap_options = c("bordered", "hover"), 
                full_width = FALSE)
```

### mod4
```{r}
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>% 
  coef(unconstrained=FALSE, allCoef=TRUE) %>% 
  enframe(name="grpA", value="varStructA")

mod4.nlme.varStruct.B <- mod4.nlme$modelStruct$varStruct$B %>% 
  coef(unconstrained=FALSE, allCoef=TRUE) %>% 
  enframe(name="grpB", value="varStructB")

mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA, 
                            mod4.nlme.varStruct.B$grpB,
                            stringsAsFactors=FALSE) %>% 
  rename(grpA=Var1, grpB=Var2) %>% 
  left_join(x=., y=mod4.nlme.varStruct.A, by="grpA") %>% 
  left_join(x=., y=mod4.nlme.varStruct.B, by="grpB") %>% 
  mutate(sigma         = mod4.nlme$sigma) %>% 
  mutate(StandardError = sigma*varStructA*varStructB) %>% 
  mutate(Variance      = StandardError^2)
```
```{r, echo=FALSE}
mod4.nlme.VC %>%
  mutate_if(is.double, round, 3) %>% 
  kable(escape = FALSE) %>% 
  kable_styling(bootstrap_options = c("bordered", "hover"), 
                full_width = FALSE)
```

## lme4
in progress

## glmmTMB
in progress

## sommer
in progress

# Model Fit {.tabset .tabset-fade .tabset-pills}
As is standard procedure, we can do a model selection based on goodness-of-fit statistics such as the AIC. In order to have a direct comparison to Table 1 in [(Piepho, 2009)](https://acsess.onlinelibrary.wiley.com/doi/abs/10.2134/agronj2008.0226x), we also calculated the deviance (*i.e.* -2*loglikelihood) for each model. The code is shown for mod1:

## nlme

<div class = "row"> <div class = "col-md-6">
```{r}
mod1.nlme %>% AIC # AIC 
```
</div> <div class = "col-md-6">
```{r}
-2 * logLik(mod1.nlme) %>% # Deviance
  as.double 
```
</div> </div>

```{r, echo=FALSE}
tibble(Model = paste0("mod", 1:4),
       AIC = AIC(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme)$AIC,
       Deviance = -2 * c(mod1.nlme %>% logLik, 
                         mod2.nlme %>% logLik,
                         mod3.nlme %>% logLik,
                         mod4.nlme %>% logLik) %>% as.double) %>% 
  kable(escape = FALSE) %>% 
  kable_styling(bootstrap_options = c("bordered", "hover"), 
                full_width = FALSE)
```

## lme4
in progress

## glmmTMB
in progress

## sommer
in progress