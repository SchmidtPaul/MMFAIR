pluck("Cor") %>% pluck("plot") %>%
as_tibble(rownames = " ") %>%
mutate_if(is.double, round, 3)
mod.ar1.glmm.VC %>%
pluck("Cor") %>% pluck("plot") %>%
as_tibble(rownames = "cor") %>%
mutate_if(is.double, round, 3)
knitr::purl("autoregressive_time_series.Rmd", documentation = 0)
mod.iid.somm <- mmer(fixed  = y ~ factweek * (variety + block),
rcov   = ~ AR1(plot),
data   = dat, verbose=F)
mod.iid.somm <- mmer(fixed  = y ~ factweek,# * (variety + block),
rcov   = ~ AR1(plot),
data   = dat, verbose=F)
mod.iid.somm <- mmer(fixed  = y ~ factweek,# * (variety + block),
#rcov   = ~ AR1(plot),
data   = dat, verbose=F)
mod.iid.somm
mod.iid.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
#rcov   = ~ AR1(plot),
data   = dat, verbose=F)
mod.iid.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
rcov   = ~ vs(units),
data   = dat, verbose=F)
mod.iid.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
rcov   = ~ vs(AR1(plot),units),
data   = dat, verbose=F)
mod.iid.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
rcov   = ~ vs(AR1(plot),factweek),
data   = dat, verbose=F)
mod.iid.somm <- mmer(fixed = y ~ factweek + variety + block + factweek:variety + factweek:block,
rcov  = ~ units
data  = dat, verbose=F)
mod.iid.somm <- mmer(fixed = y ~ factweek + variety + block + factweek:variety + factweek:block,
rcov  = ~ units,
data  = dat, verbose=F)
mod.iid.somm
# get r files from rmd files
knitr::purl("heterogeneous_error_variance.Rmd", documentation = 0)
params <-
list(hilang = "sas")
# packages
pacman::p_load(dplyr, purrr, stringr, tibble, tidyr, # data handling
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, broom.mixed)     # mixed model extractions
# data
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = density %>% as.factor)
dat <- dat %>%
mutate(date_densf = interaction(date, densf)) # needed for mod5
mod1.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1 | block,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod2.nlme <- mod1.nlme %>%
update(weights = varIdent(form =  ~ 1 | date))
mod3.nlme <- mod1.nlme %>%
update(weights = varIdent(form =  ~ 1 | densf))
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form =  ~ 1 | date),
varIdent(form =  ~ 1 | densf)))
mod5.nlme <- mod1.nlme %>%
update(weights = varIdent(form =  ~ 1 | date_densf))
mod1.lme4 <- lmer(formula = yield ~ gen * date * densf + (1 | block),
data    = dat)
# mod2.lme4 - not possible
# mod3.lme4 - not possible
# mod4.lme4 - not possible
# mod5.lme4 - not possible
dat <- dat %>%
mutate(unit = 1:n() %>% as.factor) # new column with running number
mod1.glmm <- glmmTMB(formula = yield ~ gen * date * densf + (1 | block),
dispformula = ~ 1,  # = default i.e. homoscedastic error variance
REML = TRUE,        # needs to be stated since default = ML
data = dat)
mod1b.glmm <- mod1.glmm %>%
update(. ~ . + (1 | unit), # add random term to mimic homoscedastic error variance
dispformula = ~ 0) # fix original error variance to 0
mod2.glmm <- mod1.glmm %>%
update(. ~ . + diag(date + 0 | unit), dispformula = ~ 0)
mod3.glmm <- mod1.glmm %>%
update(. ~ . + diag(densf + 0 | unit), dispformula = ~ 0)
# mod4/multiplicative variance structure not possible.
mod5.glmm <- mod1.glmm %>%
update(. ~ . + diag(date:densf + 0 | unit), dispformula = ~ 0)
mod1.glmm %>% VarCorr()
mod1b.glmm %>% VarCorr()
mod1.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ units, # default
data   = dat, verbose=F)
mod2.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date), units),
data   = dat, verbose=F)
mod3.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(densf), units),
data   = dat, verbose=F)
mod4.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date), units) + vs(ds(densf), units),
data   = dat, verbose=F)
mod5.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date), ds(densf), units),
data   = dat, verbose=F)
summary(mod4.somm)
mod4.somm.VC <- summary(mod4.somm)$varcomp
mod4.somm.VC
mod4.somm.VC %>%
as_tibble(rownames="grp")
mod4.somm.VC %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", ""))
mod4.somm.VC %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block")
mod4.somm.VC <- mod4.somm.VC %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block")
mod4.somm.VC
summary(mod4.somm)$varcomp
# packages
pacman::p_load(dplyr, purrr, stringr, tibble, tidyr, # data handling
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, broom.mixed)     # mixed model extractions
# data
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = density %>% as.factor)
# packages
pacman::p_load(dplyr, purrr, stringr, tibble, tidyr, # data handling
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, broom.mixed)     # mixed model extractions
# data
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = density %>% as.factor)
# nlme mod4
mod4.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1 | block,
weights = varComb(varIdent(form =  ~ 1 | date),
varIdent(form =  ~ 1 | densf)),
data    = dat)
# sommer mod4
mod4.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date), units) + vs(ds(densf), units),
data   = dat, verbose=F)
summary(mod4.nlme)
summary(mod4.somm)
# vc comparison
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>%
coef(unconstrained = FALSE, allCoef = TRUE) %>%
enframe(name = "grpA", value = "varStructA")
mod4.nlme.varStruct.B <- mod4.nlme$modelStruct$varStruct$B %>%
coef(unconstrained = FALSE, allCoef = TRUE) %>%
enframe(name = "grpB", value = "varStructB")
mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.nlme.varStruct.A, by = "grpA") %>%
left_join(x = ., y = mod4.nlme.varStruct.B, by = "grpB") %>%
mutate(sigma         = mod4.nlme$sigma) %>%
mutate(StandardError = sigma * varStructA * varStructB) %>%
mutate(Variance      = StandardError ^ 2)
mod4.nlme.VC
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block")
# packages
pacman::p_load(dplyr, purrr, stringr, tibble, tidyr, # data handling
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, broom.mixed)     # mixed model extractions
# data
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = density %>% as.factor)
# nlme mod4
mod4.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1 | block,
weights = varComb(varIdent(form =  ~ 1 | date),
varIdent(form =  ~ 1 | densf)),
data    = dat)
# sommer mod4
mod4.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date), units) + vs(ds(densf), units),
data   = dat, verbose=F)
# vc nlme
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>%
coef(unconstrained = FALSE, allCoef = TRUE) %>%
enframe(name = "grpA", value = "varStructA")
mod4.nlme.varStruct.B <- mod4.nlme$modelStruct$varStruct$B %>%
coef(unconstrained = FALSE, allCoef = TRUE) %>%
enframe(name = "grpB", value = "varStructB")
mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.nlme.varStruct.A, by = "grpA") %>%
left_join(x = ., y = mod4.nlme.varStruct.B, by = "grpB") %>%
mutate(sigma         = mod4.nlme$sigma) %>%
mutate(StandardError = sigma * varStructA * varStructB) %>%
mutate(Variance      = StandardError ^ 2)
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block")
# compare
mod4.nlme.VC
mod4.somm.VC
summary(mod4.somm)$varcomp
# packages
pacman::p_load(dplyr, purrr, stringr, tibble, tidyr, # data handling
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, broom.mixed)     # mixed model extractions
# data
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = density %>% as.factor)
# nlme mod4
mod4.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1 | block,
weights = varComb(varIdent(form =  ~ 1 | date),
varIdent(form =  ~ 1 | densf)),
data    = dat)
# sommer mod4
mod4.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date), units) + vs(ds(densf), units),
data   = dat, verbose=F)
# vc nlme
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>%
coef(unconstrained = FALSE, allCoef = TRUE) %>%
enframe(name = "grpA", value = "varStructA")
mod4.nlme.varStruct.B <- mod4.nlme$modelStruct$varStruct$B %>%
coef(unconstrained = FALSE, allCoef = TRUE) %>%
enframe(name = "grpB", value = "varStructB")
mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.nlme.varStruct.A, by = "grpA") %>%
left_join(x = ., y = mod4.nlme.varStruct.B, by = "grpB") %>%
mutate(sigma         = mod4.nlme$sigma) %>%
mutate(StandardError = sigma * varStructA * varStructB) %>%
mutate(Variance      = StandardError ^ 2)
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block")
# compare
mod4.nlme.VC
mod4.somm.VC
summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp")
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block") %>%
mutate(grp = str_replace(grp, "\\:*", ""))
mod4.somm.VC
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block") %>%
mutate(grp = str_replace(grp, ":*", ""))
mod4.somm.VC
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block") %>%
mutate(grp = str_replace(grp, ":units", ""))
mod4.somm.VC
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE)
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.nlme.varStruct.A, by = "grpA") %>%
left_join(x = ., y = mod4.nlme.varStruct.B, by = "grpB")
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block") %>%
mutate(grp = str_replace(grp, ":units", ""))
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpA"="grp")
)
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block") %>%
mutate(grp = str_replace(grp, ":units", "")) %>%
select(grp, VarComp)
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block") %>%
mutate(grp = str_replace(grp, ":units", "")) %>%
dplyr::select(grp, VarComp)
mod4.somm.VC
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpA"="grp")
)
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpA"="grp")) %>%
rename(VarCompA=VarComp)
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpA"="grp")) %>%
rename(VarCompA = VarComp) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpB"="grp")) %>%
rename(VarCompB = VarComp)
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpA"="grp")) %>%
rename(VarCompA = VarComp) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpB"="grp")) %>%
rename(VarCompB = VarComp) %>%
mutate(VarCompSum = VarCompA+VarCompB)
expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpA"="grp")) %>%
rename(VarCompA = VarComp) %>%
left_join(x = ., y = mod4.somm.VC, by = c("grpB"="grp")) %>%
rename(VarCompB = VarComp) %>%
mutate(VarCompSum = VarCompA+VarCompB) %>%
arrange(grpA, grpB)
mod4.nlme.VC
mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors = FALSE) %>%
rename(grpA = Var1, grpB = Var2) %>%
left_join(x = ., y = mod4.nlme.varStruct.A, by = "grpA") %>%
left_join(x = ., y = mod4.nlme.varStruct.B, by = "grpB") %>%
mutate(sigma         = mod4.nlme$sigma) %>%
mutate(StandardError = sigma * varStructA * varStructB) %>%
mutate(Variance      = StandardError ^ 2) %>%
arrange(grpA, grpB)
mod4.nlme.VC
# sommer mod4
mod4.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date_densf), units),
data   = dat, verbose=F)
# packages
pacman::p_load(dplyr, purrr, stringr, tibble, tidyr, # data handling
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, broom.mixed)     # mixed model extractions
# data
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = density %>% as.factor) %>%
mutate(date_densf = interaction(date, densf)) # needed for mod5
# nlme
mod1.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1 | block,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form =  ~ 1 | date),
varIdent(form =  ~ 1 | densf)))
mod4.nlme <- mod1.nlme %>%
update(weights = varIdent(form =  ~ 1 | date_densf))
# sommer mod4
mod4.somm <- mmer(fixed  = yield ~ gen * date * densf,
random = ~ block,
rcov   = ~ vs(ds(date_densf), units),
data   = dat, verbose=F)
mod4.somm
# vc sommer
mod4.somm.VC <- summary(mod4.somm)$varcomp %>%
as_tibble(rownames="grp") %>%
mutate(grp = str_replace(grp, "\\..*", "")) %>%
filter(grp!="block") %>%
mutate(grp = str_replace(grp, ":units", "")) %>%
dplyr::select(grp, VarComp)
mod4.somm.VC
summary(mod4.somm)$varcomp
mod.ar1.somm <- mmer(fixed = y ~ factweek + variety + block + factweek:variety + factweek:block,
random = ~vs(factweek, Gu=AR1(factweek, rho=0.666)),
rcov  = ~ units, # default
data  = dat, verbose=F)
params <-
list(hilang = "sas")
# packages
pacman::p_load(dplyr, purrr, tibble, tidyr, stringr, # data handling
ggplot2, viridis,            # plot
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, mixedup)         # mixed model extractions
# data
dat <- agriTutorial::sorghum %>%
rename(block = Replicate, plot = factplot) %>%
dplyr::select(y, variety, block, plot, factweek, varweek) %>%
as_tibble()
dat.wk1 <- dat %>% filter(factweek == "1") # subset data from first week only
mod.wk1 <- lm(formula = y ~ variety + block,
data = dat.wk1)
mod.iid.nlme <- nlme::gls(model = y ~ factweek * (variety + block),
correlation = NULL, # default, i.e. homoscedastic, independent errors
data = dat)
# Extract variance component estimates
mod.iid.nlme.VC <- tibble(varstruct = "iid") %>%
mutate(sigma    = mod.iid.nlme$sigma) %>%
mutate(Variance = sigma^2)
dat <- dat %>%
mutate(unit = 1:n() %>% as.factor) # new column with running number
mod.iid.glmm <- glmmTMB(formula = y ~ factweek * (variety + block)
+ (1 | unit),      # add random unit term to mimic error variance
dispformula = ~ 0, # fix original error variance to 0
REML = TRUE,       # needs to be stated since default = ML
data = dat)
# Extract variance component estimates
mod.iid.glmm.VC <- mod.iid.glmm %>%
extract_vc(ci_scale = "var")
mod.ar1.nlme <- nlme::gls(model = y ~ factweek * (variety + block),
correlation = corAR1(form = ~ varweek | plot),
data = dat)
# Extract variance component estimates
mod.ar1.nlme.VC <- tibble(varstruct = "ar(1)") %>%
mutate(sigma    = mod.ar1.nlme$sigma,
rho      = coef(mod.ar1.nlme$modelStruct$corStruct, unconstrained = FALSE)) %>%
mutate(Variance = sigma^2,
Corr1wk  = rho,
Corr2wks = rho^2,
Corr3wks = rho^3,
Corr4wks = rho^4)
mod.ar1.glmm <- glmmTMB(formula = y ~ factweek * (variety + block)
+ ar1(factweek + 0 | plot), # add ar1 structure as random term to mimic error variance
dispformula = ~ 0, # fix original error variance to 0
REML = TRUE,       # needs to be stated since default = ML
data = dat)
# Extract variance component estimates
mod.ar1.glmm.VC <- mod.ar1.glmm %>%
extract_vc(ci_scale = "var", show_cor = TRUE)
mod.iid.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
rcov   = ~ vs(AR1(plot),factweek),
data   = dat, verbose=F)
mod.ar1.somm <- mmer(fixed = y ~ factweek + variety + block + factweek:variety + factweek:block,
random = ~vs(factweek, Gu=AR1(factweek, rho=0.666)),
rcov  = ~ units, # default
data  = dat, verbose=F)
mod.iid.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
rcov   = ~ units,
data   = dat, verbose=F)
mod.ar1.somm <- mmer(fixed = y ~ factweek + variety + block + factweek:variety + factweek:block,
random = ~vs(factweek, Gu=AR1(factweek, rho=0.666)),
rcov  = ~ units, # default
data  = dat, verbose=F)
mod.ar1.somm
summarise(mod.ar1.somm)$VarComp
summary(mod.ar1.somm)$VarComp
summary(mod.ar1.somm)$varcomp
summary(mod.ar1.somm)
x <- summary(mod.ar1.somm)
x$logo
summary(mod.ar1.somm)$varcomp
mod.ar1.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
random = ~ vs(plot, Gu = AR1(factweek, rho = fixed.rho)),
rcov   = ~ units, # default = iid
data   = dat, verbose=F)
fixed.rho <- 0.7
mod.ar1.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
random = ~ vs(plot, Gu = AR1(factweek, rho = fixed.rho)),
rcov   = ~ units, # default = iid
data   = dat, verbose=F)
mod.ar1.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
random = ~ vs(factweek, Gu = AR1(factweek, rho = fixed.rho)),
rcov   = ~ units, # default = iid
data   = dat, verbose=F)
# Extract variance component estimates
mod.ar1.somm.VC <- summary(mod.ar1.somm)$varcomp
mod.ar1.somm <- mmer(fixed  = y ~ factweek + variety + block + factweek:variety + factweek:block,
random = ~ vs(plot, Gu = AR1(plot, rho = fixed.rho)),
rcov   = ~ units, # default = iid
data   = dat, verbose=F)
# Extract variance component estimates
mod.ar1.somm.VC <- summary(mod.ar1.somm)$varcomp
mod.ar1.somm.VC
