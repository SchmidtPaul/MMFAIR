rename(effect = group)
)
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
mutate(estimate = estimate ^ 2) %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
rename(effect = group)
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag")
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
mutate(variance = variance ^ 2) %>%
rename(effect = group)
bind_rows(
diag_glmmTMB %>%
tidy(effects = "ran_pars", scales = "vcov") %>%
filter(group == "block") %>%
mutate(grp = str_remove(term, "var__")) %>%
select(group, grp, estimate) %>%
rename(variance = estimate,
effect = group)
,
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
mutate(variance = variance ^ 2) %>%
rename(effect = group)
)
bind_rows(
diag_glmmTMB %>%
tidy(effects = "ran_pars", scales = "vcov") %>%
filter(group == "block") %>%
mutate(grp = str_remove(term, "var__")) %>%
select(group, grp, estimate) %>%
rename(variance = estimate,
effect = group)
,
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
mutate(variance = variance ^ 2) %>%
rename(effect = group)
) %>%
kbl() %>%
kable_paper(full_width = F, html_font = "arial", font_size = 12)
diag_glmmTMB %>%
tidy(effects = "ran_pars", scales = "vcov") %>%
filter(group == "block") %>%
mutate(grp = str_remove(term, "var__")) %>%
select(group, grp, estimate) %>%
rename(variance = estimate,
effect = group)
diag_glmmTMB %>%
tidy
?broom.mixed
diag_glmmTMB %>% glance
diag_glmmTMB$sigma
glance(diag_glmmTMB) %>% pull(sigma)
glance(diag_glmmTMB) %>% pull(sigma) %>% `^2`
glance(diag_glmmTMB) %>% pull(sigma) %>% square
glance(diag_glmmTMB) %>% pull(sigma)
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
mutate(variance = variance ^ 2) %>%
rename(effect = group)
bind_rows(
diag_glmmTMB %>%
tidy(effects = "ran_pars", scales = "vcov") %>%
filter(group == "block") %>%
mutate(grp = str_remove(term, "var__")) %>%
select(group, grp, estimate) %>%
rename(variance = estimate,
effect = group)
,
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
mutate(variance = variance ^ 2) %>%
rename(effect = group)
,
tibble(effect = "Residual",
grp = "-",
variance = glance(diag_glmmTMB) %>% pull(sigma) %>% `**2` )
) %>%
kbl() %>%
kable_paper(full_width = F, html_font = "arial", font_size = 12)
bind_rows(
diag_glmmTMB %>%
tidy(effects = "ran_pars", scales = "vcov") %>%
filter(group == "block") %>%
mutate(grp = str_remove(term, "var__")) %>%
select(group, grp, estimate) %>%
rename(variance = estimate,
effect = group)
,
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
mutate(variance = variance ^ 2) %>%
rename(effect = group)
,
tibble(effect = "Residual",
grp = "-",
variance = glance(diag_glmmTMB) %>% pull(sigma) %>% `.^2` )
) %>%
kbl() %>%
kable_paper(full_width = F, html_font = "arial", font_size = 12)
glance(diag_glmmTMB) %>% pull(sigma)
tibble(a="a", b=3)
tibble(a="a", b=3) %>%
pull(b)
tibble(a="a", b=3) %>%
pull(b) %>%
`^`(2)
bind_rows(
diag_glmmTMB %>%
tidy(effects = "ran_pars", scales = "vcov") %>%
filter(group == "block") %>%
mutate(grp = str_remove(term, "var__")) %>%
select(group, grp, estimate) %>%
rename(variance = estimate,
effect = group)
,
diag_glmmTMB %>%
mixedup::extract_cor_structure(which_cor="diag") %>%
pivot_longer( cols = 2:3, values_to ="variance", names_to="grp") %>%
mutate(variance = variance ^ 2) %>%
rename(effect = group)
,
tibble(effect = "Residual",
grp = "-",
variance = glance(diag_glmmTMB) %>% pull(sigma) %>% `^`(2))
) %>%
kbl() %>%
kable_paper(full_width = F, html_font = "arial", font_size = 12)
PseudErrMod %>% tidy
?sq()
exp(3)
3 %>% exp()
3 %>% `^`(2)
.Machine
.Machine$double.eps
AICcmodavg::aictab(list(diag_glmmTMB, diag_lme),
c("StandErrMod", "PseudErrMod"),
second.ord = FALSE)
AICcmodavg::aictab(list(diag_glmmTMB),
c("StandErrMod"),
second.ord = FALSE)
AICcmodavg::aictab(list(diag_lme),
c("StandErrMod"),
second.ord = FALSE)
diag_lme
diag_glmmTMB
AICcmodavg::aictab(list(diag_glmmTMB),
c("StandErrMod"),
second.ord = FALSE)
AICcmodavg::aictab(list(diag_lme),
c("StandErrMod"),
second.ord = FALSE)
diag_glmmTMB %>% glance
diag_lme %>% glance
diag_glmmTMB %>% glance() %>% select(logLik:BIC)
diag_lme %>% glance %>% select(logLik:BIC)
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# get r files from rmd files
knitr::purl("Rpurl/heterogeneous_error_variance.Rmd", documentation = 0)
knitr::purl("Rpurl/autoregressive_time_series.Rmd", documentation = 0)
knitr::purl("Rpurl/glmmtmbdispformula0.Rmd", documentation = 0)
# knitr::purl("weighted_two_stage.Rmd", documentation = 0)
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# get r files from rmd files
knitr::purl("heterogeneous_error_variance.Rmd", documentation = 0)
knitr::purl("autoregressive_time_series.Rmd", documentation = 0)
knitr::purl("glmmtmbdispformula0.Rmd", documentation = 0)
# knitr::purl("weighted_two_stage.Rmd", documentation = 0)
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
list.files(pattern = ".Rmd")
list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd"))
list.files(pattern = ".Rmd") %>%
tibble(Rmd = .)
list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd"))
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# get r files from rmd files
knitr::purl("heterogeneous_error_variance.Rmd", documentation = 0)
knitr::purl("autoregressive_time_series.Rmd", documentation = 0)
knitr::purl("glmmtmbdispformula0.Rmd", documentation = 0)
# knitr::purl("weighted_two_stage.Rmd", documentation = 0)
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# get r files from rmd files
knitr::purl("heterogeneous_error_variance.Rmd", documentation = 0)
knitr::purl("autoregressive_time_series.Rmd", documentation = 0)
knitr::purl("glmmtmbdispformula0.Rmd", documentation = 0)
# knitr::purl("weighted_two_stage.Rmd", documentation = 0)
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# get r files from rmd files
knitr::purl("heterogeneous_error_variance.Rmd", documentation = 0)
knitr::purl("autoregressive_time_series.Rmd", documentation = 0)
knitr::purl("glmmtmbdispformula0.Rmd", documentation = 0)
# knitr::purl("weighted_two_stage.Rmd", documentation = 0)
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# get r files from rmd files
knitr::purl("heterogeneous_error_variance.Rmd", documentation = 0)
knitr::purl("autoregressive_time_series.Rmd", documentation = 0)
knitr::purl("glmmtmbdispformula0.Rmd", documentation = 0)
# knitr::purl("weighted_two_stage.Rmd", documentation = 0)
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# get r files from rmd files
knitr::purl("heterogeneous_error_variance.Rmd", documentation = 0)
knitr::purl("autoregressive_time_series.Rmd", documentation = 0)
knitr::purl("glmmtmbdispformula0.Rmd", documentation = 0)
# knitr::purl("weighted_two_stage.Rmd", documentation = 0)
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
pacman::p_load(conflicted,
tidyverse,
nlme, glmmTMB,
broom.mixed,
emo, flair)
# packages
pacman::p_load(conflicted, # package function conflicts
dplyr, purrr, stringr, tibble, tidyr, # data handling
nlme, lme4, glmmTMB, sommer, # mixed modelling
AICcmodavg, broom.mixed)     # mixed model extractions
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
pacman::p_load(conflicted,
tidyverse,
nlme, glmmTMB,
broom.mixed,
emo, flair)
# package function conflicts
conflict_prefer("filter", "dplyr")
pacman::p_load(kableExtra)
options(knitr.kable.NA = '')
# this is never seen but needed for code below
dat <- iris %>%
mutate(unit = 1:n() %>% as.factor()) %>%
rename(y=Sepal.Length,
fixedeffects=Species,
randomeffects=Sepal.Width) %>%
as_tibble()
# Chunk 1
pacman::p_load(conflicted,
tidyverse,
nlme, glmmTMB,
broom.mixed,
emo, flair)
# package function conflicts
conflict_prefer("filter", "dplyr")
# Chunk 2
pacman::p_load(kableExtra)
options(knitr.kable.NA = '')
# Chunk 3: hideme
# this is never seen but needed for code below
dat <- iris %>%
mutate(unit = 1:n() %>% as.factor()) %>%
rename(y=Sepal.Length,
fixedeffects=Species,
randomeffects=Sepal.Width) %>%
as_tibble()
# Chunk 4: StandErrMod
#
#
StandErrMod <- glmmTMB(
y ~
fixedeffects +
(1 | randomeffects),
REML = TRUE,
data = dat
)
# Chunk 5
decorate("StandErrMod")
# Chunk 6: PseudErrMod
dat <- dat %>%
mutate(unit = as.factor(1:n()))
PseudErrMod <- glmmTMB(
y ~
fixedeffects +
(1 | randomeffects) +
(1 | unit),      # Pseudo Err
dispformula = ~ 0, # ErrVar = 0
REML = TRUE,
data = dat
)
decorate("PseudErrMod") %>% flair_lines(c(1,2,8,9))
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
`%not_in%` = Negate(`%in%`)
### create purled R files ###
purl_files <- list.files(pattern = ".Rmd") %>%
tibble(Rmd = .) %>%
filter(Rmd %not_in% c("_hilang_setup.Rmd",
"0contactinfo.Rmd",
"index.Rmd",
"model_selection.Rmd",
"sources.Rmd",
"variance_structures.Rmd",
"weighted_two_stage.Rmd")) %>%
mutate(R = paste0("Rpurl/",str_sub(Rmd, 1, -3)))
for(i in 1:nrow(purl_files)){
knitr::purl(input  = purl_files %>% slice(i) %>% pull(Rmd),
output = purl_files %>% slice(i) %>% pull(R),
documentation = 0)
}
purl_files
