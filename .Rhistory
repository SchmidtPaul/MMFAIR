dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = as.factor(density))
boxplot(yield ~ date,  data=dat)
boxplot(yield ~ densf, data=dat)
mod1.nlme <- nlme::gls(model   = yield ~ block + gen * date * densf,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod2.nlme <- mod1.nlme %>%
update(weights = varIdent(form=~1|densf)) # one error variance per density
mod3.nlme <- mod1.nlme %>%
update(weights = varIdent(form=~1|date))  # one error variance per date
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf), # one error variance per
varIdent(form=~1|date))) # density-date combination
# VC mod1
mod1.nlme.VC <- tibble(grp="all", varStruct=1) %>%
mutate(sigma         = mod1.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod1.nlme.VC %>%
kable(escape = F) %>%
kable_styling(bootstrap_options = c("bordered", "hover"),
full_width = FALSE)
# VC mod2
mod2.nlme.VC <- mod2.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod2.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod2.nlme.VC
mod2.nlme.VC %>%
mutate_if(~is.double(), round(3))
mod2.nlme.VC
mod2.nlme.VC %>%
mutate_if(~is.double(.), round(3))
mod2.nlme.VC %>%
mutate_if(is.double(), round(3))
mod2.nlme.VC %>%
mutate_if(is.double(.), round(3))
mod2.nlme.VC %>%
mutate_if(is.double(.), round, 3)
mod2.nlme.VC %>%
mutate_if(is.double, round, 3)
library(kableExtra)
library(formattable)
library(pacman)
p_load(dplyr, nlme)
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = as.factor(density))
boxplot(yield ~ date,  data=dat)
boxplot(yield ~ densf, data=dat)
mod1.nlme <- nlme::gls(model   = yield ~ block + gen * date * densf,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod2.nlme <- mod1.nlme %>%
update(weights = varIdent(form=~1|densf)) # one error variance per density
mod3.nlme <- mod1.nlme %>%
update(weights = varIdent(form=~1|date))  # one error variance per date
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf), # one error variance per
varIdent(form=~1|date))) # density-date combination
mod1.nlme.VC <- tibble(grp="all", varStruct=1) %>%
mutate(sigma         = mod1.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod1.nlme.VC %>%
mutate_if(is.double, round, 3) %>%
kable(escape = FALSE) %>%
kable_styling(bootstrap_options = c("bordered", "hover"),
full_width = FALSE)
mod2.nlme.VC <- mod2.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod2.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod2.nlme.VC %>%
mutate_if(is.double, round, 3) %>%
kable(escape = FALSE) %>%
kable_styling(bootstrap_options = c("bordered", "hover"),
full_width = FALSE)
mod3.nlme.VC <- mod3.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod3.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod3.nlme.VC %>%
mutate_if(is.double, round, 3) %>%
kable(escape = FALSE) %>%
kable_styling(bootstrap_options = c("bordered", "hover"),
full_width = FALSE)
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grpA", value="varStructA")
mod4.nlme.varStruct.A
mod4.nlme.varStruct.A
mod4.nlme.varStruct.A
mod4.nlme.varStruct.A$grpA
mod1.nlme %>% tidy
library(pacman)
p_load(dplyr, purrr,
broom.mixed,
nlme)
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = as.factor(density))
mod1.nlme <- nlme::gls(model   = yield ~ block + gen * date * densf,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod2.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf))) # one error variance per density
mod3.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|date)))  # one error variance per date
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf), # one error variance per
varIdent(form=~1|date))) # density-date combination
# VC mod1
tibble(grp="all", varStruct=1) %>%
mutate(sigma         = mod1.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod2
mod2.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod2.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod3
mod3.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod3.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod4
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grpA", value="varStructA")
mod4.nlme.varStruct.B <- mod4.nlme$modelStruct$varStruct$B %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grpB", value="varStructB")
mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors=FALSE) %>%
rename(grpA=Var1, grpB=Var2) %>%
left_join(x=., y=mod4.nlme.varStruct.A, by="grpA") %>%
left_join(x=., y=mod4.nlme.varStruct.B, by="grpB") %>%
mutate(sigma         = mod4.nlme$sigma) %>%
mutate(StandardError = sigma*varStructA*varStructB) %>%
mutate(Variance      = StandardError^2)
mod1.nlme %>% tidy
mod1.nlme %>% broom.mixed::glance()
mod1.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1|block,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod1.nlme
mod4.nlme
library(pacman)
p_load(dplyr, purrr,
broom.mixed,
nlme)
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = as.factor(density))
mod1.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1|block,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod2.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf))) # one error variance per density
mod3.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|date)))  # one error variance per date
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf), # one error variance per
varIdent(form=~1|date))) # density-date combination
# VC mod1
tibble(grp="all", varStruct=1) %>%
mutate(sigma         = mod1.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod2
mod2.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod2.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod3
mod3.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod3.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod4
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grpA", value="varStructA")
mod4.nlme.varStruct.B <- mod4.nlme$modelStruct$varStruct$B %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grpB", value="varStructB")
mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors=FALSE) %>%
rename(grpA=Var1, grpB=Var2) %>%
left_join(x=., y=mod4.nlme.varStruct.A, by="grpA") %>%
left_join(x=., y=mod4.nlme.varStruct.B, by="grpB") %>%
mutate(sigma         = mod4.nlme$sigma) %>%
mutate(StandardError = sigma*varStructA*varStructB) %>%
mutate(Variance      = StandardError^2)
mod1.nlme %>% broom.mixed::glance()
mod1.nlme
mod1.nlme.VC %>%
mutate_if(is.double, round, 3) %>%
kable(escape = FALSE) %>%
kable_styling(bootstrap_options = c("bordered", "hover"),
full_width = FALSE)
mod1.nlme %>% broom.mixed::tidy
mod1.nlme %>% broom.mixed::tidy()
mod2.nlme %>% broom.mixed::tidy()
mod2.nlme %>% broom.mixed::tidy(x = "ran_pars")
mod2.nlme %>% broom.mixed::tidy(effects = "ran_pars")
tibble(grp="all", varStruct=1) %>%
mutate(sigma         = mod1.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod2.nlme %>% broom.mixed::tidy(effects = "ran_pars")
mod2.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod2.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod2.nlme %>% broom.mixed::tidy(effects = "ran_pars")
mod1.nlme %>% summary
mod1.nlme$sigma
mod1.nlme$logLik
-2*mod1.nlme$logLik
-2*mod2.nlme$logLik
mod2.nlme$logLik
mod2.nlme
mod2.nlme$logLik
logLik(mod1.nlme)
logLik(mod1.nlme, REML = T)
logLik(mod1.nlme, REML = F)
-2*logLik(mod1.nlme, REML = T)
-2*logLik(mod1.nlme, REML = F)
-2*logLik(mod2.nlme, REML = T)
library(pacman)
p_load(dplyr, purrr,
broom.mixed,
nlme)
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = as.factor(density))
mod1.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1|block,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod2.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|date)))  # one error variance per date
mod3.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf))) # one error variance per density
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf), # one error variance per
varIdent(form=~1|date))) # density-date combination
# VC mod1
tibble(grp="all", varStruct=1) %>%
mutate(sigma         = mod1.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod2
mod2.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod2.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod3
mod3.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grp", value="varStruct") %>%
mutate(sigma         = mod3.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
# VC mod4
mod4.nlme.varStruct.A <- mod4.nlme$modelStruct$varStruct$A %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grpA", value="varStructA")
mod4.nlme.varStruct.B <- mod4.nlme$modelStruct$varStruct$B %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
tibble::enframe(name="grpB", value="varStructB")
mod4.nlme.VC <- expand.grid(mod4.nlme.varStruct.A$grpA,
mod4.nlme.varStruct.B$grpB,
stringsAsFactors=FALSE) %>%
rename(grpA=Var1, grpB=Var2) %>%
left_join(x=., y=mod4.nlme.varStruct.A, by="grpA") %>%
left_join(x=., y=mod4.nlme.varStruct.B, by="grpB") %>%
mutate(sigma         = mod4.nlme$sigma) %>%
mutate(StandardError = sigma*varStructA*varStructB) %>%
mutate(Variance      = StandardError^2)
mod1.nlme %>% summary
mod1.nlme$sigma
-2*logLik(mod1.nlme, REML = T)
-2*logLik(mod2.nlme, REML = T)
-2*logLik(mod3.nlme, REML = T)
-2*logLik(mod4.nlme, REML = T)
-2*logLik(mod1.nlme)
-2*logLik(mod1.nlme) %>% round(1)
-2*logLik(mod1.nlme) %>% round(1) %>% as.double()
-2*logLik(mod2.nlme) %>% round(1) %>% as.double()
-2*logLik(mod3.nlme) %>% round(1) %>% as.double()
-2*logLik(mod4.nlme) %>% round(1) %>% as.double()
-2*logLik(mod1.nlme) %>% round(2) %>% as.double()
-2*logLik(mod2.nlme) %>% round(2) %>% as.double()
-2*logLik(mod3.nlme) %>% round(2) %>% as.double()
-2*logLik(mod4.nlme) %>% round(2) %>% as.double()
-2*logLik(mod2.nlme) %>% round(2) %>% as.double()
-2*logLik(mod2.nlme) %>% round(1) %>% as.double()
-2*logLik(mod2.nlme) %>% round(3) %>% as.double()
-2*logLik(mod2.nlme) %>% round(1) %>% as.double()
-2*logLik(mod1.nlme) %>% formatC(n, format="f", digits=2)
-2*logLik(mod1.nlme) %>% formatC(.,digits=8,format="f")
-2*logLik(mod1.nlme) %>% as.double() %>% formatC(.,digits=8,format="f")
-2*logLik(mod1.nlme) %>% as.double()
-2*logLik(mod1.nlme) %>% as.double %>% round(1)
logLik(mod1.nlme)
-2*logLik(mod1.nlme) %>% as.double %>% round(2)
-2*logLik(mod2.nlme) %>% as.double %>% round(2)
-2*logLik(mod3.nlme) %>% as.double %>% round(2)
-2*logLik(mod4.nlme) %>% as.double %>% round(2)
MOD <- mod1.nlme
tibble(model = deparse(substitute(MOD)))
MOD <- mod1.nlme
tibble(model = deparse(substitute(MOD)))
tibble(model = deparse(quote(MOD)))
MOD
tibble(Deviance = -2*logLik(mod1.nlme) %>% as.double %>% round(2))
tibble(Deviance = -2*logLik(mod1.nlme) %>% as.numeric %>% round(2))
tibble(Deviance = -2*logLik(mod1.nlme) %>% double %>% round(2))
tibble(Deviance = -2*logLik(mod1.nlme) %>% double() %>% round(2))
tibble(Deviance = -2*logLik(mod1.nlme) %>% as.double() %>% round(2))
tibble(Deviance = -2*logLik(mod1.nlme) %>% as.double() %>% round(1))
mod1.nlme
mod1.nlme$terms
attr(logLik(mod1.nlme), "df")
ogLik(mod1.nlme)
logLik(mod1.nlme)
x <- logLik(mod1.nlme)
attributes(x)
attributes(logLik(mod1.nlme))
logLik(mod1.nlme)
tibble(Deviance = -2*logLik(mod1.nlme))
tibble(Deviance = -2*logLik(c(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme)))
sapply(c(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), -2*logLik(.))
sapply(c(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), -2*logLik)
lapply(c(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), function(x) lapply(x, -2*logLik)
)
lapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), function(x) lapply(x, -2*logLik))
sapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), function(x) lapply(x, -2*logLik))
sapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), function(x) lapply(x, -2*logLik(x)))
sapply(mod1.nlme, function(x)-2*logLik(x))
sapply(mod1.nlme, function(x){-2*logLik(x)})
lapply(mod1.nlme, function(x){-2*logLik(x)})
lapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), function(x){-2*logLik(x)})
lapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), function(x){-2*logLik(x)%>% as.double})
lapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme),
function(x){-2*logLik(x) %>% as.double}, simplify=TRUE)
lapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), simplify=TRUE,
function(x){-2*logLik(x) %>% as.double})
lapply(X = list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), simplify=TRUE,
FUN =function(x){-2*logLik(x) %>% as.double})
sapply(X = list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme), simplify=TRUE,
FUN =function(x){-2*logLik(x) %>% as.double})
sapply(X = list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme),
simplify=TRUE, USE.NAMES = TRUE,
FUN =function(x){-2*logLik(x) %>% as.double})
mod1.nlme
mod1.nlme$call
mod1.nlme$call$weights
mod2.nlme$call$weights
tibble(weights  =MOD$mod2.nlme$call$weights,
Deviance = -2*logLik(MOD) %>% as.double)
MOD$mod2.nlme$call$weights
-2*logLik(MOD) %>% as.double
tibble(weights  = MOD$mod2.nlme$call$weights,
Deviance = -2*logLik(MOD) %>% as.double)
tibble(weights  = paste(MOD$mod2.nlme$call$weights),
Deviance = -2*logLik(MOD) %>% as.double)
tibble(weights  = print(MOD$mod2.nlme$call$weights),
Deviance = -2*logLik(MOD) %>% as.double)
tibble(weights  = cat(MOD$mod2.nlme$call$weights),
Deviance = -2*logLik(MOD) %>% as.double)
tibble(Deviance = -2 * c(mod1.nlme, mod2.nlme) %>% logLik %>%
as.double)
tibble(Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik)
as.double)
tibble(Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>%
as.double)
sapply(X = list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme),
simplify=TRUE, FUN =function(x){-2*logLik(x) %>% as.double})
sapply(list(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme),
function(x){-2*logLik(x) %>% as.double}, simplify=TRUE)
tibble(Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>% as.double)
paste0("mod", seq(1:4))
paste0("mod", 1:4)
tibble(Model = paste0("mod", 1:4),
Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>% as.numeric)
tibble(Model = paste0("mod", 1:4),
Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>% as.double)
tibble(Model = paste0("mod", 1:4),
Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>% as.double,
AIC = AIC(mod1.nlme, mod2.nlme, mod3.nlme, mod4.nlme))
AIC(mod1.nlme, mod2.nlme, mod3.nlme, mod4.nlme)
AIC(mod1.nlme, mod2.nlme, mod3.nlme, mod4.nlme)$AIC
tibble(Model = paste0("mod", 1:4),
Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>% as.double,
AIC = AIC(mod1.nlme, mod2.nlme, mod3.nlme, mod4.nlme)$AIC)
tibble(Model = paste0("mod", 1:4),
Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>% as.double,
df  = AIC(mod1.nlme, mod2.nlme, mod3.nlme, mod4.nlme)$df,
AIC = AIC(mod1.nlme, mod2.nlme, mod3.nlme, mod4.nlme)$AIC)
tibble(Model = paste0("mod", 1:4),
Deviance = -2 * c(mod1.nlme %>% logLik,
mod2.nlme %>% logLik,
mod3.nlme %>% logLik,
mod4.nlme %>% logLik) %>% as.double,
AIC = AIC(mod1.nlme,mod2.nlme,mod3.nlme,mod4.nlme)$AIC)
-2 * LogLik(mod1.nlme) %>% as.double
setwd("D:/Coding/MMFAIR")
library("rmarkdown")
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# packages for better formatting tables for html output
library(kableExtra)
library(formattable)
pacman::p_load(dplyr, tibble, # packages for data handling
nlme, glmmTMB) # packages for mixed models
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = as.factor(density))
boxplot(yield ~ date,  data=dat)
boxplot(yield ~ density, data=dat)
# packages for better formatting tables for html output
library(kableExtra)
library(formattable)
pacman::p_load(dplyr, tibble, # packages for data handling
nlme, glmmTMB) # packages for mixed models
dat <- agridat::mcconway.turnip %>%
as_tibble() %>%
mutate(densf = as.factor(density))
boxplot(yield ~ date,    data=dat)
boxplot(yield ~ density, data=dat)
mod1.nlme <- nlme::lme(fixed   = yield ~ gen * date * densf,
random  = ~ 1|block,
weights = NULL, # default, i.e. homoscedastic errors
data    = dat)
mod2.nlme <- mod1.nlme %>%
update(weights = varIdent(form=~1|densf)) # one error variance per density
mod3.nlme <- mod1.nlme %>%
update(weights = varIdent(form=~1|date))  # one error variance per date
mod4.nlme <- mod1.nlme %>%
update(weights = varComb(varIdent(form=~1|densf), # one error variance per
varIdent(form=~1|date))) # density-date combination
mod1.nlme.VC <- tibble(grp="all", varStruct=1) %>%
mutate(sigma         = mod1.nlme$sigma) %>%
mutate(StandardError = sigma*varStruct) %>%
mutate(Variance      = StandardError^2)
mod1.nlme.VC %>%
mutate_if(is.double, round, 3) %>%
kable(escape = FALSE) %>%
kable_styling(bootstrap_options = c("bordered", "hover"),
full_width = FALSE)
mod2.nlme$modelStruct$varStruct
mod2.nlme$modelStruct$varStruct %>%
coef(unconstrained=FALSE, allCoef=TRUE) %>%
enframe(name="grp", value="varStruct")
tibble(Model = paste0("mod", 1:4),
Block    = "Identity",
Genotype = "Identity",
Density  = c("Identity", "Identity", "Diagonal", "Diagonal"),
Date     = c("Identity", "Diagonal", "Identity", "Diagonal"))
